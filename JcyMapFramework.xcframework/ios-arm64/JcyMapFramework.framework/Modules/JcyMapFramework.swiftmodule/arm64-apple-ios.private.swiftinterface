// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target arm64-apple-ios14.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name JcyMapFramework
// swift-module-flags-ignorable: -enable-bare-slash-regex
import ArcGIS
import CoreLocation
import DeveloperToolsSupport
import Foundation
@_exported import JcyMapFramework
import Swift
import SwiftUI
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public enum BasemapStyleEnum : Swift.Int {
  case TIANDITU_IMAGE
  case TIANDITU_VECTOR
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension Swift.String {
  public func toParsePolygon(setWkid: @escaping (Swift.Int) -> Swift.Void = {_ in }) -> ArcGIS.AGSPolygon?
  public func toDictionary() -> Foundation.NSDictionary?
}
extension Foundation.NSDictionary {
  public func toJson() -> Swift.String
}
public enum TianDiTuLayerTypes : Swift.Int {
  case TIANDITU_VECTOR_MERCATOR
  case TIANDITU_VECTOR_ANNOTATION_CHINESE_MERCATOR
  case TIANDITU_VECTOR_ANNOTATION_ENGLISH_MERCATOR
  case TIANDITU_IMAGE_MERCATOR
  case TIANDITU_IMAGE_ANNOTATION_CHINESE_MERCATOR
  case TIANDITU_IMAGE_ANNOTATION_ENGLISH_MERCATOR
  case TIANDITU_TERRAIN_MERCATOR
  case TIANDITU_TERRAIN_ANNOTATION_CHINESE_MERCATOR
  case TIANDITU_VECTOR_2000
  case TIANDITU_VECTOR_ANNOTATION_CHINESE_2000
  case TIANDITU_VECTOR_ANNOTATION_ENGLISH_2000
  case TIANDITU_IMAGE_2000
  case TIANDITU_IMAGE_ANNOTATION_CHINESE_2000
  case TIANDITU_IMAGE_ANNOTATION_ENGLISH_2000
  case TIANDITU_TERRAIN_2000
  case TIANDITU_TERRAIN_ANNOTATION_CHINESE_2000
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class JCYLocationService : ObjectiveC.NSObject, CoreLocation.CLLocationManagerDelegate {
  public func startUpdatingLocation(allowsBackgroundLocationUpdates: Swift.Bool, onUpdatingLocation: ((CoreLocation.CLLocation) -> Swift.Void)?)
  @objc public func locationManager(_ manager: CoreLocation.CLLocationManager, didUpdateLocations locations: [CoreLocation.CLLocation])
  @objc public func locationManager(_ manager: CoreLocation.CLLocationManager, didChangeAuthorization status: CoreLocation.CLAuthorizationStatus)
  @objc public func locationManager(_ manager: CoreLocation.CLLocationManager, didFailWithError error: any Swift.Error)
  public func stopUpdatingLocation()
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class JCYMapView : ArcGIS.AGSMapView {
  @_Concurrency.MainActor(unsafe) public var mPolygonOverlay: ArcGIS.AGSGraphicsOverlay
  @_Concurrency.MainActor(unsafe) public var mAreaOverlay: ArcGIS.AGSGraphicsOverlay
  @_Concurrency.MainActor(unsafe) public var mGraphicsScopeOverlay: ArcGIS.AGSGraphicsOverlay
  @_Concurrency.MainActor(unsafe) public var mThematicDataOverlay: ArcGIS.AGSGraphicsOverlay
  @_Concurrency.MainActor(unsafe) public var mBorderOverlay: ArcGIS.AGSGraphicsOverlay
  @_Concurrency.MainActor(unsafe) public var mPictureOverlay: ArcGIS.AGSGraphicsOverlay
  @_Concurrency.MainActor(unsafe) public var mOverlayPictureAngle: ArcGIS.AGSGraphicsOverlay
  @_Concurrency.MainActor(unsafe) public var mGpsRouteGraphics: ArcGIS.AGSGraphicsOverlay
  @_Concurrency.MainActor(unsafe) public var mCircleOverlay: ArcGIS.AGSGraphicsOverlay
  @_Concurrency.MainActor(unsafe) public var mFarmlandOverlay: ArcGIS.AGSGraphicsOverlay
  @_Concurrency.MainActor(unsafe) public var mConstructionLandOverlay: ArcGIS.AGSGraphicsOverlay
  @_Concurrency.MainActor(unsafe) public var mAllPolygonExtent: ArcGIS.AGSEnvelope?
  @_Concurrency.MainActor(unsafe) public var mDrawGeometryExtent: ArcGIS.AGSEnvelope?
  @_Concurrency.MainActor(unsafe) public var angleMap: [Swift.String : ArcGIS.AGSGraphic]
  @_Concurrency.MainActor(unsafe) public var polygonMap: [Swift.String : ArcGIS.AGSGraphic]
  @_Concurrency.MainActor(unsafe) public var areaMap: [Swift.String : ArcGIS.AGSGraphic]
  @_Concurrency.MainActor(unsafe) public var scopeMap: [Swift.String : ArcGIS.AGSGraphic]
  @_Concurrency.MainActor(unsafe) public var pictureMap: [Swift.String : ArcGIS.AGSGraphic]
  @_Concurrency.MainActor(unsafe) public var rasterLayerMap: [Swift.String : ArcGIS.AGSRasterLayer] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func removeFromSuperview()
  @_Concurrency.MainActor(unsafe) public func initMapView(_ onLoad: @escaping () -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public func moveToGeometry(extent: ArcGIS.AGSGeometry?, pindding: Swift.Double, moveUp: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func moveUpMap()
  @_Concurrency.MainActor(unsafe) public func mapZoomin()
  @_Concurrency.MainActor(unsafe) public func mapZoomout()
  @_Concurrency.MainActor(unsafe) public func zoomToLocation(curLocation: CoreLocation.CLLocation?)
  @_Concurrency.MainActor(unsafe) public func baseMapLayerStyle(basemapStyle: JcyMapFramework.BasemapStyleEnum)
  @objc deinit
}
extension JcyMapFramework.JCYMapView : ArcGIS.AGSGeoViewTouchDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func geoView(_ geoView: ArcGIS.AGSGeoView, didTapAtScreenPoint screenPoint: CoreFoundation.CGPoint, mapPoint: ArcGIS.AGSPoint)
}
extension JcyMapFramework.JCYMapView : JcyMapFramework.JCYMapViewDelegate {
  @_Concurrency.MainActor(unsafe) public func addCircle(point: ArcGIS.AGSPoint, radius: Swift.Double)
  @_Concurrency.MainActor(unsafe) public func addAreaGeometry(geometryJson: Swift.String?, id: Swift.String?, showTag: Swift.String?, pindding: Swift.Double, isMoveToGeometry: Swift.Bool, isMoveUp: Swift.Bool, onClickGeometry: ((ArcGIS.AGSGraphic) -> Swift.Void)?)
  @_Concurrency.MainActor(unsafe) public func addProjectPolygon(polygon: ArcGIS.AGSPolygon?, id: Swift.String?, showTag: Swift.String?, pindding: Swift.Double, color: UIKit.UIColor?, isMoveToGeometry: Swift.Bool, onClickGeometry: ((ArcGIS.AGSGraphic) -> Swift.Void)?)
  @_Concurrency.MainActor(unsafe) public func addPictureAngle(arrowImage: UIKit.UIImage?, azimuth: Swift.Float, longitude: Swift.Double, latitude: Swift.Double, id: Swift.String?, isSelected: Swift.Bool, onClickGeometry: ((ArcGIS.AGSGraphic) -> Swift.Void)?)
  @_Concurrency.MainActor(unsafe) public func addScopePolygon(polygon: ArcGIS.AGSPolygon?, id: Swift.String?, color: UIKit.UIColor?, pindding: Swift.Double, isMoveToGeometry: Swift.Bool, onClickGeometry: ((ArcGIS.AGSGraphic) -> Swift.Void)?)
  @_Concurrency.MainActor(unsafe) public func addThematicDataPolygon(polygon: ArcGIS.AGSPolygon?, id: Swift.String?, color: UIKit.UIColor?, pindding: Swift.Double)
  @_Concurrency.MainActor(unsafe) public func addBorderPolygon(polygon: ArcGIS.AGSPolygon?, id: Swift.String?, color: UIKit.UIColor?, pindding: Swift.Double)
  @_Concurrency.MainActor(unsafe) public func addPictureMarker(image: UIKit.UIImage?, longitude: Swift.Double, latitude: Swift.Double, id: Swift.String?, isSelected: Swift.Bool, pindding: Swift.Double, isMoveToGeometry: Swift.Bool, isMoveUp: Swift.Bool, onClickGeometry: ((ArcGIS.AGSGraphic) -> Swift.Void)?)
  @_Concurrency.MainActor(unsafe) public func clearGraphicsSelection()
  @_Concurrency.MainActor(unsafe) public func selecteAngle(id: Swift.String?, isSelected: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func addGpsRouteLine(points: [ArcGIS.AGSPoint], pindding: Swift.Double, isMoveToGeometry: Swift.Bool, isMoveUp: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func addGpsRoutePts(point: ArcGIS.AGSPoint, curLocation: CoreLocation.CLLocation? = nil)
  @_Concurrency.MainActor(unsafe) public func addFarmlandOverlay(polygon: ArcGIS.AGSPolygon?, id: Swift.String?, color: UIKit.UIColor?, pindding: Swift.Double)
  @_Concurrency.MainActor(unsafe) public func addConstructionLandOverlay(polygon: ArcGIS.AGSPolygon?, id: Swift.String?, color: UIKit.UIColor?, pindding: Swift.Double)
  @_Concurrency.MainActor(unsafe) public func deleteAreaGeometryFromID(id: Swift.String?)
  @_Concurrency.MainActor(unsafe) public func clearGpsRoutePts()
  @_Concurrency.MainActor(unsafe) public func clearAllGraphics()
  @_Concurrency.MainActor(unsafe) public func clearAllAreaGraphics()
  @_Concurrency.MainActor(unsafe) public func clearAllPolygonGraphics()
  @_Concurrency.MainActor(unsafe) public func clearAllScopePolygon()
  @_Concurrency.MainActor(unsafe) public func clearThematicDataPolygon()
  @_Concurrency.MainActor(unsafe) public func clearBorderPolygon()
  @_Concurrency.MainActor(unsafe) public func clearAllPictureMarker()
  @_Concurrency.MainActor(unsafe) public func clearAllPictureAngle()
  @_Concurrency.MainActor(unsafe) public func clearFarmlandOverlay()
  @_Concurrency.MainActor(unsafe) public func clearConstructionLandOverlay()
  @_Concurrency.MainActor(unsafe) public func showLocationAndOrientationOnMap(imageLocation: UIKit.UIImage?, longitude: Swift.Double, latitude: Swift.Double, azimuth: Swift.Float, height: Swift.Float, width: Swift.Float)
  @_Concurrency.MainActor(unsafe) public func addTimePhasesRaster(fileURL: Foundation.URL, id: Swift.String?)
}
public protocol JCYMapViewDelegate {
  func addAreaGeometry(geometryJson: Swift.String?, id: Swift.String?, showTag: Swift.String?, pindding: Swift.Double, isMoveToGeometry: Swift.Bool, isMoveUp: Swift.Bool, onClickGeometry: ((ArcGIS.AGSGraphic) -> Swift.Void)?)
  func addProjectPolygon(polygon: ArcGIS.AGSPolygon?, id: Swift.String?, showTag: Swift.String?, pindding: Swift.Double, color: UIKit.UIColor?, isMoveToGeometry: Swift.Bool, onClickGeometry: ((ArcGIS.AGSGraphic) -> Swift.Void)?)
  func addPictureAngle(arrowImage: UIKit.UIImage?, azimuth: Swift.Float, longitude: Swift.Double, latitude: Swift.Double, id: Swift.String?, isSelected: Swift.Bool, onClickGeometry: ((ArcGIS.AGSGraphic) -> Swift.Void)?)
  func addGpsRouteLine(points: [ArcGIS.AGSPoint], pindding: Swift.Double, isMoveToGeometry: Swift.Bool, isMoveUp: Swift.Bool)
  func addScopePolygon(polygon: ArcGIS.AGSPolygon?, id: Swift.String?, color: UIKit.UIColor?, pindding: Swift.Double, isMoveToGeometry: Swift.Bool, onClickGeometry: ((ArcGIS.AGSGraphic) -> Swift.Void)?)
  func addThematicDataPolygon(polygon: ArcGIS.AGSPolygon?, id: Swift.String?, color: UIKit.UIColor?, pindding: Swift.Double)
  func addBorderPolygon(polygon: ArcGIS.AGSPolygon?, id: Swift.String?, color: UIKit.UIColor?, pindding: Swift.Double)
  func addPictureMarker(image: UIKit.UIImage?, longitude: Swift.Double, latitude: Swift.Double, id: Swift.String?, isSelected: Swift.Bool, pindding: Swift.Double, isMoveToGeometry: Swift.Bool, isMoveUp: Swift.Bool, onClickGeometry: ((ArcGIS.AGSGraphic) -> Swift.Void)?)
  func addGpsRoutePts(point: ArcGIS.AGSPoint, curLocation: CoreLocation.CLLocation?)
  func clearGpsRoutePts()
  func clearGraphicsSelection()
  func clearAllGraphics()
  func clearAllAreaGraphics()
  func clearAllPolygonGraphics()
  func clearAllScopePolygon()
  func clearAllPictureMarker()
  func clearAllPictureAngle()
  func selecteAngle(id: Swift.String?, isSelected: Swift.Bool)
  func deleteAreaGeometryFromID(id: Swift.String?)
  func showLocationAndOrientationOnMap(imageLocation: UIKit.UIImage?, longitude: Swift.Double, latitude: Swift.Double, azimuth: Swift.Float, height: Swift.Float, width: Swift.Float)
  func addTimePhasesRaster(fileURL: Foundation.URL, id: Swift.String?)
  func addCircle(point: ArcGIS.AGSPoint, radius: Swift.Double)
}
extension JcyMapFramework.JCYMapView {
  @_Concurrency.MainActor(unsafe) public func createModeFreehandPolygon(onSketchGeometry: ((_ code: Swift.Int, _ area: Swift.Double, _ geometryJson: Swift.String, _ msg: Swift.String) -> Swift.Void)?)
  @_Concurrency.MainActor(unsafe) public func createModePolygon(onSketchGeometry: ((_ code: Swift.Int, _ area: Swift.Double, _ geometryJson: Swift.String, _ msg: Swift.String) -> Swift.Void)?)
  @_Concurrency.MainActor(unsafe) public func drawingFinish(isDrawLine: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func createModePolyline(onSketchGeometry: ((_ code: Swift.Int, _ length: Swift.Double, _ geometryJson: Swift.String, _ msg: Swift.String) -> Swift.Void)?)
  @_Concurrency.MainActor(unsafe) public func createModePoint(onSketchGeometry: ((_ code: Swift.Int, _ area: Swift.Double, _ geometryJson: Swift.String, _ msg: Swift.String) -> Swift.Void)?)
  @_Concurrency.MainActor(unsafe) public func clearSketch()
  @_Concurrency.MainActor(unsafe) public func clearSketchGeometry()
}
extension JcyMapFramework.BasemapStyleEnum : Swift.Equatable {}
extension JcyMapFramework.BasemapStyleEnum : Swift.Hashable {}
extension JcyMapFramework.BasemapStyleEnum : Swift.RawRepresentable {}
extension JcyMapFramework.TianDiTuLayerTypes : Swift.Equatable {}
extension JcyMapFramework.TianDiTuLayerTypes : Swift.Hashable {}
extension JcyMapFramework.TianDiTuLayerTypes : Swift.RawRepresentable {}
